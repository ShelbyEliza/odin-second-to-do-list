(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>d});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Geo&family=Geologica:wght@100&display=swap);"]),i.push([t.id,':root {\n\t--midnight-express: #25273b;\n\t--anarchist: #d12945;\n\t--pomelo-red: #ea92af;\n\t--genie: #404365;\n\t--golden-lion: #f3c76a;\n\t--foggy-love: #d5cee4;\n\n\t/* --baklava: #efb336ff;\n\t--viridian: #1c9b7aff; */\n}\n\nhtml,\nbody {\n\tmin-height: 100vh;\n\tmargin: 0 auto;\n\n\tfont-size: 16px;\n\tbox-sizing: border-box;\n\tfont-family: "Space Mono", monospace, sans-serif, -apple-system,\n\t\tBlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n\t\t"Open Sans", "Helvetica Neue", sans-serif;\n}\nbody {\n\tbackground: linear-gradient(var(--genie) 20%, var(--pomelo-red));\n\tcolor: var(--midnight-express);\n}\nheader {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-end;\n\tbackground-color: var(--genie);\n\n\tpadding-right: 2rem;\n}\nheader h1 {\n\ttext-shadow: 0.09rem 0.08rem 0.2rem var(--anarchist);\n\tcolor: var(--foggy-love);\n}\nheader p {\n\tpadding-left: 1rem;\n\tcolor: var(--pomelo-red);\n}\n.title-header {\n\tborder: 2px dotted var(--anarchist);\n\tpadding: 0rem 1rem 0.4rem 2rem;\n\tmargin-left: 1rem;\n\tmargin-top: 1rem;\n\tbox-shadow: 0.1rem 0.1rem 1rem var(--pomelo-red);\n}\nheader button,\n#add-to-do-btn {\n\tborder: 2px solid var(--pomelo-red);\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n#add-to-do-btn:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n}\nheader button:hover {\n\tborder-width: 3px;\n}\nheader h1,\np {\n\tmargin: 0rem;\n}\np {\n\tfont-family: "Geologica", sans-serif;\n\tfont-weight: 200;\n}\nh2,\nh3 {\n\tmargin: 0rem;\n}\nul {\n\tlist-style-type: none;\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n\tfont-family: inherit;\n\tfont-size: 100%;\n}\n\nbutton,\ninput {\n\tmargin: 0;\n\tpadding: 0;\n\tbox-sizing: border-box;\n}\n\nbutton {\n\tbox-shadow: none;\n\tborder: none;\n\tpadding: 0.2rem 0.4rem;\n\tborder-radius: 0.2rem;\n}\nbutton:hover {\n\tcursor: pointer;\n}\n.project-list-wrapper {\n\tdisplay: flex;\n}\nform {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n}\nlabel {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tpadding: 0.4rem;\n\talign-items: flex-start;\n}\n\n.proj-wrapper {\n\tdisplay: grid;\n\tjustify-content: center;\n\tgrid-template-columns: repeat(auto-fit, minmax(100px, 250px));\n\tpadding: 1.5rem 1rem;\n\tgap: 0.8rem;\n}\n.card-wrapper {\n\tdisplay: grid;\n\tgrid-template-rows: min-content min-content auto min-content;\n\theight: 200px;\n\n\tpadding: 0.8rem 1rem;\n\tborder: 1px solid var(--midnight-express);\n\tborder-radius: 0.2rem;\n\n\tbackground-color: var(--genie);\n\n\tcolor: var(--foggy-love);\n\tbox-shadow: 0.3rem 0.3rem 0.6rem var(--midnight-express);\n}\n.card-wrapper h3,\n.card-wrapper p {\n\tmargin: 0rem;\n}\n.description {\n\tpadding: 0.4rem 0.2rem;\n\toverflow: hidden;\n\n\tborder-top: 1px solid var(--pomelo-red);\n}\n.to-do-list {\n\toverflow: hidden;\n}\n.card-btn-wrapper {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tbackground-color: var(--genie);\n\tpadding: 0.2rem;\n}\n\n.card-btn-wrapper button {\n\talign-self: end;\n\ttext-align: center;\n}\n.expand-btn,\n.edit-btn,\n#close-proj-btn {\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n.expand-btn:hover,\n.edit-btn:hover,\n#close-proj-btn:hover {\n\tfilter: brightness(1.2);\n}\n.delete-btn {\n\tbackground-color: var(--golden-lion);\n\n\tcolor: var(--midnight-express);\n}\n.delete-btn:hover {\n\tbackground-color: var(--anarchist);\n\tcolor: var(--foggy-love);\n}\n\n/** Edit/Add: */\n#title-input,\n#description-input,\n#to-do-input {\n\tpadding-left: 0.2rem;\n}\n#add-project-wrapper input {\n\tpadding: 0.4rem 0.6rem;\n\tborder-radius: 0.2rem;\n\tmargin: 0.2rem;\n}\n\n#to-do-list-div {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fit, minmax(min-content, 30%));\n\tpadding: 0.8rem;\n\talign-items: center;\n\tgap: 0.4rem;\n}\n.to-do-wrapper label {\n\tdisplay: flex;\n\talign-items: center;\n}\n.temp-to-do-div {\n\tdisplay: flex;\n\tfont-size: 0.8rem;\n\tgap: 0.2rem;\n\tborder: 1px solid var(--foggy-love);\n\n\talign-items: center;\n\tborder-radius: 0.27rem;\n}\n.temp-to-do-div button {\n\tmargin-left: auto;\n\tpadding: 0.4rem;\n\tborder-top-left-radius: 0rem;\n\tborder-bottom-left-radius: 0rem;\n\n\tbackground-color: var(--pomelo-red);\n}\n.temp-to-do-div button:hover {\n\tbackground-color: var(--anarchist);\n\tcolor: var(--foggy-love);\n}\n.temp-to-do-div p {\n\tmargin: 0rem;\n\tpadding: 0.4rem;\n\tcolor: var(--foggy-love);\n}\n\n#submit-project-btn,\n#cancel-project-btn {\n\tbackground-color: var(--genie);\n\tborder: 1px solid var(--foggy-love);\n\tcolor: var(--foggy-love);\n}\n#submit-project-btn:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--midnight-express);\n}\n#cancel-project-btn:hover {\n\tbackground-color: var(--golden-lion);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--midnight-express);\n}\n\n/** Modals and Expanded **/\n:modal {\n\tborder-radius: 1rem;\n\tpadding: 1rem 2rem;\n}\n#add-project-wrapper:modal {\n\twidth: 70%;\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n#dialog-expanded:modal {\n\twidth: 50%;\n\tbackground-color: var(--genie);\n\tcolor: var(--foggy-love);\n}\n.due-date-ex-wrapper {\n\tdisplay: flex;\n\talign-items: flex-end;\n}\n.due-date-ex {\n\tpadding-left: 1rem;\n}\n.content-ex-wrapper {\n\tmargin-top: 0.4rem;\n\tborder-radius: 0.2rem;\n\tborder: 1px solid var(--midnight-express);\n}\n.description-ex {\n\tborder-bottom: 2px dotted var(--midnight-express);\n\tpadding: 1rem 2rem;\n\tbackground-color: var(--midnight-express);\n\tborder-top-left-radius: 0.2rem;\n\tborder-top-right-radius: 0.2rem;\n\n\tcolor: var(--foggy-love);\n\ttext-indent: 1rem;\n}\n.to-do-ex-heading {\n\tpadding: 0.4rem;\n\ttext-align: center;\n}\n.to-do-list-ex {\n\tpadding: 0rem 2rem 1rem 2rem;\n}\n.to-do-item {\n\tmargin: 0.2rem;\n\tpadding: 0.1rem 0.2rem;\n\n\tborder-radius: 0.2rem;\n\tborder: 1px solid var(--midnight-express);\n}\n.btn-wrapper {\n\tdisplay: flex;\n\tjustify-content: center;\n\tpadding: 0.8rem;\n\tgap: 1rem;\n}\n.btn-wrapper-ex button:first-child {\n\tmargin-right: auto;\n}\n\n/** Priority: */\n.priority,\n#dialog-expanded.priority {\n\tbackground-color: var(--pomelo-red);\n\n\tcolor: var(--midnight-express);\n}\n.card-wrapper.priority .description {\n\tborder-top: 1px solid var(--genie);\n}\n.card-wrapper.priority .card-btn-wrapper {\n\tbackground-color: var(--pomelo-red);\n}\n/** Card Holders: */\n.projects-heading {\n\ttext-align: center;\n\tcolor: var(--foggy-love);\n}\n\n/** Sort by */\n.sort-wrapper {\n\tdisplay: flex;\n\tjustify-content: center;\n\tgap: 1rem;\n\tpadding: 2rem;\n}\n.sort-wrapper button {\n\tbackground-color: var(--midnight-express);\n\tborder: 1px solid var(--foggy-love);\n\tcolor: var(--foggy-love);\n}\n.sort-wrapper button.active-btn,\n.sort-wrapper button:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--pomelo-red);\n}\n\n#completed-btn.active-btn {\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n\tborder-color: var(--golden-lion);\n}\n#completed-btn.active-btn:hover {\n\tcolor: var(--foggy-love);\n\tborder-color: var(--foggy-love);\n}\n\n.completed {\n\tfilter: brightness(0.8);\n}\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Geo&family=Geologica:wght@100&display=swap");\n\n:root {\n\t--midnight-express: #25273b;\n\t--anarchist: #d12945;\n\t--pomelo-red: #ea92af;\n\t--genie: #404365;\n\t--golden-lion: #f3c76a;\n\t--foggy-love: #d5cee4;\n\n\t/* --baklava: #efb336ff;\n\t--viridian: #1c9b7aff; */\n}\n\nhtml,\nbody {\n\tmin-height: 100vh;\n\tmargin: 0 auto;\n\n\tfont-size: 16px;\n\tbox-sizing: border-box;\n\tfont-family: "Space Mono", monospace, sans-serif, -apple-system,\n\t\tBlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,\n\t\t"Open Sans", "Helvetica Neue", sans-serif;\n}\nbody {\n\tbackground: linear-gradient(var(--genie) 20%, var(--pomelo-red));\n\tcolor: var(--midnight-express);\n}\nheader {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-end;\n\tbackground-color: var(--genie);\n\n\tpadding-right: 2rem;\n}\nheader h1 {\n\ttext-shadow: 0.09rem 0.08rem 0.2rem var(--anarchist);\n\tcolor: var(--foggy-love);\n}\nheader p {\n\tpadding-left: 1rem;\n\tcolor: var(--pomelo-red);\n}\n.title-header {\n\tborder: 2px dotted var(--anarchist);\n\tpadding: 0rem 1rem 0.4rem 2rem;\n\tmargin-left: 1rem;\n\tmargin-top: 1rem;\n\tbox-shadow: 0.1rem 0.1rem 1rem var(--pomelo-red);\n}\nheader button,\n#add-to-do-btn {\n\tborder: 2px solid var(--pomelo-red);\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n#add-to-do-btn:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n}\nheader button:hover {\n\tborder-width: 3px;\n}\nheader h1,\np {\n\tmargin: 0rem;\n}\np {\n\tfont-family: "Geologica", sans-serif;\n\tfont-weight: 200;\n}\nh2,\nh3 {\n\tmargin: 0rem;\n}\nul {\n\tlist-style-type: none;\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n\tfont-family: inherit;\n\tfont-size: 100%;\n}\n\nbutton,\ninput {\n\tmargin: 0;\n\tpadding: 0;\n\tbox-sizing: border-box;\n}\n\nbutton {\n\tbox-shadow: none;\n\tborder: none;\n\tpadding: 0.2rem 0.4rem;\n\tborder-radius: 0.2rem;\n}\nbutton:hover {\n\tcursor: pointer;\n}\n.project-list-wrapper {\n\tdisplay: flex;\n}\nform {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n}\nlabel {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tpadding: 0.4rem;\n\talign-items: flex-start;\n}\n\n.proj-wrapper {\n\tdisplay: grid;\n\tjustify-content: center;\n\tgrid-template-columns: repeat(auto-fit, minmax(100px, 250px));\n\tpadding: 1.5rem 1rem;\n\tgap: 0.8rem;\n}\n.card-wrapper {\n\tdisplay: grid;\n\tgrid-template-rows: min-content min-content auto min-content;\n\theight: 200px;\n\n\tpadding: 0.8rem 1rem;\n\tborder: 1px solid var(--midnight-express);\n\tborder-radius: 0.2rem;\n\n\tbackground-color: var(--genie);\n\n\tcolor: var(--foggy-love);\n\tbox-shadow: 0.3rem 0.3rem 0.6rem var(--midnight-express);\n}\n.card-wrapper h3,\n.card-wrapper p {\n\tmargin: 0rem;\n}\n.description {\n\tpadding: 0.4rem 0.2rem;\n\toverflow: hidden;\n\n\tborder-top: 1px solid var(--pomelo-red);\n}\n.to-do-list {\n\toverflow: hidden;\n}\n.card-btn-wrapper {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tbackground-color: var(--genie);\n\tpadding: 0.2rem;\n}\n\n.card-btn-wrapper button {\n\talign-self: end;\n\ttext-align: center;\n}\n.expand-btn,\n.edit-btn,\n#close-proj-btn {\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n.expand-btn:hover,\n.edit-btn:hover,\n#close-proj-btn:hover {\n\tfilter: brightness(1.2);\n}\n.delete-btn {\n\tbackground-color: var(--golden-lion);\n\n\tcolor: var(--midnight-express);\n}\n.delete-btn:hover {\n\tbackground-color: var(--anarchist);\n\tcolor: var(--foggy-love);\n}\n\n/** Edit/Add: */\n#title-input,\n#description-input,\n#to-do-input {\n\tpadding-left: 0.2rem;\n}\n#add-project-wrapper input {\n\tpadding: 0.4rem 0.6rem;\n\tborder-radius: 0.2rem;\n\tmargin: 0.2rem;\n}\n\n#to-do-list-div {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fit, minmax(min-content, 30%));\n\tpadding: 0.8rem;\n\talign-items: center;\n\tgap: 0.4rem;\n}\n.to-do-wrapper label {\n\tdisplay: flex;\n\talign-items: center;\n}\n.temp-to-do-div {\n\tdisplay: flex;\n\tfont-size: 0.8rem;\n\tgap: 0.2rem;\n\tborder: 1px solid var(--foggy-love);\n\n\talign-items: center;\n\tborder-radius: 0.27rem;\n}\n.temp-to-do-div button {\n\tmargin-left: auto;\n\tpadding: 0.4rem;\n\tborder-top-left-radius: 0rem;\n\tborder-bottom-left-radius: 0rem;\n\n\tbackground-color: var(--pomelo-red);\n}\n.temp-to-do-div button:hover {\n\tbackground-color: var(--anarchist);\n\tcolor: var(--foggy-love);\n}\n.temp-to-do-div p {\n\tmargin: 0rem;\n\tpadding: 0.4rem;\n\tcolor: var(--foggy-love);\n}\n\n#submit-project-btn,\n#cancel-project-btn {\n\tbackground-color: var(--genie);\n\tborder: 1px solid var(--foggy-love);\n\tcolor: var(--foggy-love);\n}\n#submit-project-btn:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--midnight-express);\n}\n#cancel-project-btn:hover {\n\tbackground-color: var(--golden-lion);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--midnight-express);\n}\n\n/** Modals and Expanded **/\n:modal {\n\tborder-radius: 1rem;\n\tpadding: 1rem 2rem;\n}\n#add-project-wrapper:modal {\n\twidth: 70%;\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n}\n#dialog-expanded:modal {\n\twidth: 50%;\n\tbackground-color: var(--genie);\n\tcolor: var(--foggy-love);\n}\n.due-date-ex-wrapper {\n\tdisplay: flex;\n\talign-items: flex-end;\n}\n.due-date-ex {\n\tpadding-left: 1rem;\n}\n.content-ex-wrapper {\n\tmargin-top: 0.4rem;\n\tborder-radius: 0.2rem;\n\tborder: 1px solid var(--midnight-express);\n}\n.description-ex {\n\tborder-bottom: 2px dotted var(--midnight-express);\n\tpadding: 1rem 2rem;\n\tbackground-color: var(--midnight-express);\n\tborder-top-left-radius: 0.2rem;\n\tborder-top-right-radius: 0.2rem;\n\n\tcolor: var(--foggy-love);\n\ttext-indent: 1rem;\n}\n.to-do-ex-heading {\n\tpadding: 0.4rem;\n\ttext-align: center;\n}\n.to-do-list-ex {\n\tpadding: 0rem 2rem 1rem 2rem;\n}\n.to-do-item {\n\tmargin: 0.2rem;\n\tpadding: 0.1rem 0.2rem;\n\n\tborder-radius: 0.2rem;\n\tborder: 1px solid var(--midnight-express);\n}\n.btn-wrapper {\n\tdisplay: flex;\n\tjustify-content: center;\n\tpadding: 0.8rem;\n\tgap: 1rem;\n}\n.btn-wrapper-ex button:first-child {\n\tmargin-right: auto;\n}\n\n/** Priority: */\n.priority,\n#dialog-expanded.priority {\n\tbackground-color: var(--pomelo-red);\n\n\tcolor: var(--midnight-express);\n}\n.card-wrapper.priority .description {\n\tborder-top: 1px solid var(--genie);\n}\n.card-wrapper.priority .card-btn-wrapper {\n\tbackground-color: var(--pomelo-red);\n}\n/** Card Holders: */\n.projects-heading {\n\ttext-align: center;\n\tcolor: var(--foggy-love);\n}\n\n/** Sort by */\n.sort-wrapper {\n\tdisplay: flex;\n\tjustify-content: center;\n\tgap: 1rem;\n\tpadding: 2rem;\n}\n.sort-wrapper button {\n\tbackground-color: var(--midnight-express);\n\tborder: 1px solid var(--foggy-love);\n\tcolor: var(--foggy-love);\n}\n.sort-wrapper button.active-btn,\n.sort-wrapper button:hover {\n\tbackground-color: var(--pomelo-red);\n\tcolor: var(--midnight-express);\n\tborder-color: var(--pomelo-red);\n}\n\n#completed-btn.active-btn {\n\tbackground-color: var(--midnight-express);\n\tcolor: var(--foggy-love);\n\tborder-color: var(--golden-lion);\n}\n#completed-btn.active-btn:hover {\n\tcolor: var(--foggy-love);\n\tborder-color: var(--foggy-love);\n}\n\n.completed {\n\tfilter: brightness(0.8);\n}\n'],sourceRoot:""}]);const d=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],d=0;d<t.length;d++){var s=t[d],l=r.base?s[0]+r.base:s[0],c=a[l]||0,u="".concat(l," ").concat(c);a[l]=c+1;var A=n(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=n(a[i]);e[d].references--}for(var s=r(t,o),l=0;l<a.length;l++){var c=n(a[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=s}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function r(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t,n){e(2,arguments);var o=r(t),a=r(n),i=o.getTime()-a.getTime();return i>0?-1:i<0?1:i}function a(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function i(t){e(1,arguments);var n=r(t),o=n.getUTCDay(),a=(o<1?7:0)+o-1;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function d(t){e(1,arguments);var n=r(t),o=n.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(o+1,0,4),a.setUTCHours(0,0,0,0);var d=i(a),s=new Date(0);s.setUTCFullYear(o,0,4),s.setUTCHours(0,0,0,0);var l=i(s);return n.getTime()>=d.getTime()?o+1:n.getTime()>=l.getTime()?o:o-1}var s={};function l(){return s}function c(t,n){var o,i,d,s,c,u,A,m;e(1,arguments);var p=l(),h=a(null!==(o=null!==(i=null!==(d=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==d?d:p.weekStartsOn)&&void 0!==i?i:null===(A=p.locale)||void 0===A||null===(m=A.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==o?o:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=r(t),C=g.getUTCDay(),f=(C<h?7:0)+C-h;return g.setUTCDate(g.getUTCDate()-f),g.setUTCHours(0,0,0,0),g}function u(t,n){var o,i,d,s,u,A,m,p;e(1,arguments);var h=r(t),g=h.getUTCFullYear(),C=l(),f=a(null!==(o=null!==(i=null!==(d=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(u=n.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==d?d:C.firstWeekContainsDate)&&void 0!==i?i:null===(m=C.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==o?o:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(g+1,0,f),v.setUTCHours(0,0,0,0);var b=c(v,n),w=new Date(0);w.setUTCFullYear(g,0,f),w.setUTCHours(0,0,0,0);var y=c(w,n);return h.getTime()>=b.getTime()?g+1:h.getTime()>=y.getTime()?g:g-1}function A(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const m=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return A("yy"===e?r%100:r,e.length)},p=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):A(n+1,2)},h=function(t,e){return A(t.getUTCDate(),e.length)},g=function(t,e){return A(t.getUTCHours()%12||12,e.length)},C=function(t,e){return A(t.getUTCHours(),e.length)},f=function(t,e){return A(t.getUTCMinutes(),e.length)},v=function(t,e){return A(t.getUTCSeconds(),e.length)},b=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return A(Math.floor(r*Math.pow(10,n-3)),e.length)};var w={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return m(t,e)},Y:function(t,e,n,r){var o=u(t,r),a=o>0?o:1-o;return"YY"===e?A(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):A(a,e.length)},R:function(t,e){return A(d(t),e.length)},u:function(t,e){return A(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return A(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return A(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return p(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return A(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,o,i){var d=function(t,n){e(1,arguments);var o=r(t),i=c(o,n).getTime()-function(t,n){var r,o,i,d,s,A,m,p;e(1,arguments);var h=l(),g=a(null!==(r=null!==(o=null!==(i=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(s=n.locale)||void 0===s||null===(A=s.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:h.firstWeekContainsDate)&&void 0!==o?o:null===(m=h.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==r?r:1),C=u(t,n),f=new Date(0);return f.setUTCFullYear(C,0,g),f.setUTCHours(0,0,0,0),c(f,n)}(o,n).getTime();return Math.round(i/6048e5)+1}(t,i);return"wo"===n?o.ordinalNumber(d,{unit:"week"}):A(d,n.length)},I:function(t,n,o){var a=function(t){e(1,arguments);var n=r(t),o=i(n).getTime()-function(t){e(1,arguments);var n=d(t),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),i(r)}(n).getTime();return Math.round(o/6048e5)+1}(t);return"Io"===n?o.ordinalNumber(a,{unit:"week"}):A(a,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):h(t,e)},D:function(t,n,o){var a=function(t){e(1,arguments);var n=r(t),o=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=o-n.getTime();return Math.floor(a/864e5)+1}(t);return"Do"===n?o.ordinalNumber(a,{unit:"dayOfYear"}):A(a,n.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return A(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return A(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return A(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return g(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):C(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):A(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):f(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):v(t,e)},S:function(t,e){return b(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return B(o);case"XXXX":case"XX":return x(o);default:return x(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return B(o);case"xxxx":case"xx":return x(o);default:return x(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+y(o,":");default:return"GMT"+x(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+y(o,":");default:return"GMT"+x(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return A(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return A((r._originalDate||t).getTime(),e.length)}};function y(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+A(a,2)}function B(t,e){return t%60==0?(t>0?"-":"+")+A(Math.abs(t)/60,2):x(t,e)}function x(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+A(Math.floor(o/60),2)+n+A(o%60,2)}const D=w;var k=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},E=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const S={p:E,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return k(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",k(o,e)).replace("{{time}}",E(a,e))}};var T=["D","DD"],M=["YY","YYYY"];function j(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function U(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const W={date:U({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:U({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:U({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function I(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,d=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[d]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const q={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:I({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:I({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:I({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:I({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:I({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function O(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(s)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(d))return n}(s):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(d))return n}(s);return i=t.valueCallback?t.valueCallback(l):l,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(d.length)}}}var Y,z={ordinalNumber:(Y={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Y.matchPattern);if(!n)return null;var r=n[0],o=t.match(Y.parsePattern);if(!o)return null;var a=Y.valueCallback?Y.valueCallback(o[0]):o[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:t.slice(r.length)}}),era:O({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:O({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:O({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:O({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:O({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const N={code:"en-US",formatDistance:function(t,e,n){var r,o=P[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:W,formatRelative:function(t,e,n,r){return L[t]},localize:q,match:z,options:{weekStartsOn:0,firstWeekContainsDate:1}};var F=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,H=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,G=/^'([^]*?)'?$/,R=/''/g,Q=/[a-zA-Z]/;function X(n,o,i){var d,s,c,u,A,m,p,h,g,C,f,v,b,w,y,B,x,k;e(2,arguments);var E=String(o),P=l(),U=null!==(d=null!==(s=null==i?void 0:i.locale)&&void 0!==s?s:P.locale)&&void 0!==d?d:N,W=a(null!==(c=null!==(u=null!==(A=null!==(m=null==i?void 0:i.firstWeekContainsDate)&&void 0!==m?m:null==i||null===(p=i.locale)||void 0===p||null===(h=p.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==A?A:P.firstWeekContainsDate)&&void 0!==u?u:null===(g=P.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==c?c:1);if(!(W>=1&&W<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=a(null!==(f=null!==(v=null!==(b=null!==(w=null==i?void 0:i.weekStartsOn)&&void 0!==w?w:null==i||null===(y=i.locale)||void 0===y||null===(B=y.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==b?b:P.weekStartsOn)&&void 0!==v?v:null===(x=P.locale)||void 0===x||null===(k=x.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==f?f:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!U.localize)throw new RangeError("locale must contain localize property");if(!U.formatLong)throw new RangeError("locale must contain formatLong property");var I=r(n);if(!function(n){if(e(1,arguments),!function(n){return e(1,arguments),n instanceof Date||"object"===t(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var o=r(n);return!isNaN(Number(o))}(I))throw new RangeError("Invalid time value");var q=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(I),O=function(t,n){return e(2,arguments),function(t,n){e(2,arguments);var o=r(t).getTime(),i=a(n);return new Date(o+i)}(t,-a(n))}(I,q),Y={firstWeekContainsDate:W,weekStartsOn:L,locale:U,_originalDate:I};return E.match(H).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,S[e])(t,U.formatLong):t})).join("").match(F).map((function(t){if("''"===t)return"'";var e,r,a=t[0];if("'"===a)return(r=(e=t).match(G))?r[1].replace(R,"'"):e;var d,s=D[a];if(s)return null!=i&&i.useAdditionalWeekYearTokens||(d=t,-1===M.indexOf(d))||j(t,o,String(n)),null!=i&&i.useAdditionalDayOfYearTokens||!function(t){return-1!==T.indexOf(t)}(t)||j(t,o,String(n)),s(O,t,U.localize,Y);if(a.match(Q))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return t})).join("")}function _(t){let e=t.split("-");return new Date(e[1]+"/"+e[2]+"/"+e[0])}let V=new class{constructor(){this.view="alpha",this.showCompleted=!1,!0===function(){let t;try{t=window.localStorage;const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}()?(this.getStoredData("projects")||(console.log("User has no previous projects data."),localStorage.setItem("projects",{active:[],archived:[]})),this.getStoredData("view")?this.view=this.getStoredData("view"):this.setStoredSettings("view"),this.getStoredData("showCompleted")?this.showCompleted=this.getStoredData("showCompleted"):this.setStoredSettings("showCompleted")):console.log("Storage is not available.")}getStoredData(t){return localStorage.getItem(t)}getParsedStoredData(t){return localStorage.getItem(t)}setStoredData(t){localStorage.setItem("projects",t)}setStoredSettings(t){localStorage.setItem(t,this[t])}deleteProject(t,e){let n=this.getParsedStoredData("projects"),r=n[e].filter((e=>e.id!==t));n[e]=r,this.setStoredData(n)}addProjectData(t,e){let n=this.getParsedStoredData("projects");return n[e].push(t),this.setStoredData(n),n.active[n[e].length-1]}editProjectData(t,e,n){let r=this.getParsedStoredData("projects"),o=r[e].filter((e=>e.id!==t.id));return n?(r[e]=o,r[n].push(t),this.setStoredData(r),r[n][r[n].length-1]):(o.push(t),r[e]=o,this.setStoredData(r),r[e][r[e].length-1])}sortByAlpha(){let t=this.getParsedStoredData("projects");t.active.sort((function(t,e){return t.title<e.title?-1:t.title>e.title?1:0})),t.archived.sort((function(t,e){return t.title<e.title?-1:t.title>e.title?1:0})),this.setStoredData(t)}sortByDue(t){let n=this.getParsedStoredData("projects");"ascending"===t?n.active.sort(((t,n)=>function(t,n){e(2,arguments);var o=r(t),a=r(n),i=o.getTime()-a.getTime();return i<0?-1:i>0?1:i}(new Date(_(t.dueDate)),new Date(_(n.dueDate))))):(n.active.sort(((t,e)=>o(new Date(_(t.dueDate)),new Date(_(e.dueDate))))),n.archived.sort(((t,e)=>o(new Date(_(t.dueDate)),new Date(_(e.dueDate)))))),this.setStoredData(n)}};class J{constructor(t,e,n,r){this.dom=document.createElement(t),e.length>=0&&this.dom.classList.add(e),n&&(this.dom.textContent=n,"button"===t&&(this.dom.value=n)),r&&this.appendToParent(r)}addToClassList(t){this.dom.classList.add(t)}removeFromClassList(t){this.dom.classList.remove(t)}appendToParent(t){t.appendChild(this.dom)}}class Z{constructor(t,e,n,r){this.id=t.id,this.wrapper=new J("div","card-wrapper"),this.wrapper.dom.id=t.id,this.title=new J("h3","title",t.title,this.wrapper.dom);let o=(a=t.dueDate,X(new Date(_(a)),"MMMM dd, yyyy"));var a;this.dueDate=new J("p","due-date",o,this.wrapper.dom),this.description=new J("p","description",t.description,this.wrapper.dom),this.priority=t.priority,!0===this.priority&&this.wrapper.addToClassList("priority"),this.completed=t.completed,!0===this.completed&&this.wrapper.addToClassList("completed"),this.toDoList=new J("ul","to-do-list","",this.wrapper.dom),t.toDos&&t.toDos.forEach((t=>{new J("li","to-do-item",t,this.toDoList.dom)})),this.toDoList.dom.hidden=!0,this.btnWrapper=new J("div","card-btn-wrapper","",this.wrapper.dom),this.deleteBtn=new J("button","delete-btn","Delete",this.btnWrapper.dom),this.editBtn=new J("button","edit-btn","Edit",this.btnWrapper.dom),this.expandBtn=new J("button","expand-btn","Expand",this.btnWrapper.dom),this.parentDom=e,this.parentDom.appendChild(this.wrapper.dom),this.expandBtn.dom.addEventListener("click",(t=>{t.preventDefault(),document.getElementById("dialog-expanded").showModal(),r.expandProject(this.id,this)})),this.deleteBtn.dom.addEventListener("click",(t=>{t.preventDefault(),V.deleteProject(this.id,"active"),this.wrapper.dom.remove()})),this.editBtn.dom.addEventListener("click",(e=>{e.preventDefault(),n.openModal(t,this),n.turnOnEditMode(t)}))}replaceToDos(t){for(;this.toDoList.dom.firstChild;)this.toDoList.dom.removeChild(this.toDoList.dom.lastChild);t.forEach((t=>{new J("li","to-to-item",t,this.toDoList.dom)}))}toggleProperty(t,e){this[e]!==t&&(this[e]=t,!0===this[e]?this.wrapper.addToClassList(e):this.wrapper.removeFromClassList(e))}editCard(t){this.title.dom.textContent=t.title,this.dueDate.dom.textContent=t.dueDate,this.description.dom.textContent=t.description,this.toggleProperty(t.priority,"priority"),this.toggleProperty(t.completed,"completed"),this.replaceToDos(t.toDos),document.location.reload()}}const K=document.getElementById("modal-form"),$=document.getElementById("add-project-wrapper"),tt=document.getElementById("add-to-do-btn"),et=document.getElementById("add-project-btn"),nt=document.getElementById("cancel-project-btn"),rt=document.getElementById("submit-project-btn"),ot=document.getElementById("title-input"),at=document.getElementById("dueDate-input"),it=document.getElementById("description-input"),dt=document.getElementById("priority-input"),st=document.getElementById("completed-input"),lt=document.getElementById("to-do-input"),ct=document.getElementById("to-do-list-div");class ut{constructor(){this.editMode=!1,this.editData="",this.editComplete="",this.toDoData=[],this.sort="alpha",et.addEventListener("click",(()=>{$.showModal()})),tt.addEventListener("click",(t=>{if(t.preventDefault(),this.toDoData||(this.toDoData=[]),""!==lt.value)if(this.toDoData.includes(lt.value))console.log("To do already exists.");else{let t=lt.value;this.toDoData.push(t),this.createToDoDom(t)}lt.value="",lt.focus()})),nt.addEventListener("click",(t=>{t.preventDefault(),this.turnOffEditMode(),this.clearForm()})),rt.addEventListener("click",(t=>{t.preventDefault();let e={title:ot.value,dueDate:at.value,description:it.value,priority:dt.checked,completed:st.checked,toDos:this.toDoData};if(!0!==this.editMode){e.id=this.createId(e.title);let t=V.addProjectData(e,"active"),n=this.setParentDom(t.completed,t.priority);console.log(n),new Z(t,n,this)}else{e.id=this.editData.id;let t=V.editProjectData(e,"active");this.card.editCard(t),this.turnOffEditMode()}this.clearForm()}))}setParentDom(t,e){return!0===t?document.getElementById("completed-list-wrapper"):!0===e?document.getElementById("priority-list-wrapper"):document.getElementById("project-list-wrapper")}createId(t){let e=Math.floor(500*Math.random())+1;return t[0]+t[2]+t[3]+"-"+e}clearForm(){for(;ct.firstChild;)ct.removeChild(ct.lastChild);this.toDoData=[],K.reset(),$.close()}turnOnEditMode(t){console.log(t),this.editMode=!0,this.editComplete=t.completed,this.editData=t}turnOffEditMode(){this.editMode=!1,this.editData="",this.editComplete=""}openModal(t,e){$.showModal(),ot.value=t.title,at.value=t.dueDate,it.value=t.description,dt.checked=t.priority,t.completed?st.checked=t.completed:st.checked=!1,this.toDoData=t.toDos,this.toDoData&&this.toDoData.length>0&&this.toDoData.forEach((t=>{this.createToDoDom(t)})),this.card=e}createToDoDom(t){let e=new J("div","temp-to-do-div","",ct);new J("p","temp-to-to-item",t,e.dom),new J("button","delete-to-do-btn","X",e.dom).dom.addEventListener("click",(n=>{n.preventDefault(),console.log("I am deleting a to do");let r=this.toDoData.findIndex((e=>e===t));this.toDoData.splice(r,1),e.dom.remove()}))}}class At{constructor(t){this.projectDialog=document.getElementById("dialog-expanded"),this.editDialog=document.getElementById("add-project-wrapper"),this.editModal=t;const e=document.getElementById("close-proj-btn"),n=document.getElementById("edit-proj-btn"),r=document.getElementById("delete-proj-btn");this.title=document.querySelector(".title-ex"),this.dueDate=document.querySelector(".due-date-ex"),this.description=document.querySelector(".description-ex"),this.toDoWrapper=document.querySelector(".to-do-list-ex"),e.addEventListener("click",(t=>{t.preventDefault(),this.clearDom(),this.projectDialog.close()})),r.addEventListener("click",(t=>{t.preventDefault(),V.deleteProject(this.id,"active"),this.clearDom(),this.projectDialog.close(),document.location.reload()})),n.addEventListener("click",(t=>{t.preventDefault(),this.projectDialog.close();let e=this.getProject(this.id);this.editModal.openModal(e,this.card),this.editModal.turnOnEditMode(e),this.clearDom()})),this.projectDialog.close()}clearDom(){for(this.title.textContent="",this.dueDate.textContent="",this.description.textContent="",this.projectDialog.dataset.projectId="",this.id="",this.card="";this.toDoWrapper.firstChild;)this.toDoWrapper.removeChild(this.toDoWrapper.lastChild)}getProject(t){return localStorage.getItem("projects").active.find((e=>e.id===t))}expandProject(t,e){let n=this.getProject(t);this.title.textContent=n.title,this.dueDate.textContent=n.dueDate,this.description.textContent=n.description,this.id=n.id,this.card=e;let r=Array.from(this.projectDialog.classList);!0===n.priority?r.includes("priority")||this.projectDialog.classList.add("priority"):r.includes("priority")&&this.projectDialog.classList.remove("priority"),n.toDos.length>0&&this.createToDoDom(n.toDos)}createToDoDom(t){t.forEach((t=>{new J("li","to-do-item",t,this.toDoWrapper)}))}}const mt=document.getElementById("ascending-btn"),pt=document.getElementById("descending-btn"),ht=document.getElementById("alphabetical-btn"),gt=document.getElementById("completed-btn"),Ct=document.getElementById("project-list-wrapper"),ft=document.getElementById("priority-list-wrapper"),vt=document.getElementById("completed-list-wrapper"),bt=document.getElementById("completed-wrapper-full");class wt{constructor(){this.currentSort="alpha",this.modal=new ut,this.expanded=new At(this.modal),mt.addEventListener("click",(t=>{t.preventDefault(),"ascending"!==this.currentSort&&(this.switchActiveBtn(),V.sortByDue("ascending"),mt.classList.add("active-btn"),this.setCurrentSort("ascending"),this.switchView())})),pt.addEventListener("click",(t=>{t.preventDefault(),"descending"!==this.currentSort&&(this.switchActiveBtn(),V.sortByDue("descending"),pt.classList.add("active-btn"),this.setCurrentSort("descending"),this.switchView())})),ht.addEventListener("click",(t=>{t.preventDefault(),"alpha"!==this.currentSort&&(this.switchActiveBtn(),V.sortByAlpha(),ht.classList.add("active-btn"),this.setCurrentSort("alpha"),this.switchView())})),gt.addEventListener("click",(t=>{!0===bt.hidden?(bt.hidden=!1,gt.classList.add("active-btn")):(bt.hidden=!0,gt.classList.remove("active-btn"))})),this.setAllView()}switchActiveBtn(){switch(this.currentSort){case"alpha":ht.classList.remove("active-btn");break;case"ascending":mt.classList.remove("active-btn");break;case"descending":pt.classList.remove("active-btn");break;default:console.log("No switch.")}}setCurrentSort(t){this.currentSort=t}switchView(){let t=localStorage.getItem("projects").active;if(t.length>0){for(;ft.firstChild;)ft.removeChild(ft.lastChild);for(;Ct.firstChild;)Ct.removeChild(Ct.lastChild);for(;vt.firstChild;)vt.removeChild(vt.lastChild);t.forEach((t=>{!1!==t.completed&&t.completed?new Z(t,vt,this.modal,this.expanded).wrapper.addToClassList("completed"):(console.log(t),!1===t.priority?new Z(t,Ct,this.modal,this.expanded):!0===t.priority&&new Z(t,ft,this.modal,this.expanded))}))}}setAllView(){let t=JSON.parse(localStorage.getItem("projects")).active;t.length>0&&t.forEach((t=>{t.completed&&!0===t.completed?new Z(t,vt,this.modal,this.expanded):!1===t.priority?new Z(t,Ct,this.modal,this.expanded):!0===t.priority&&new Z(t,ft,this.modal,this.expanded)}))}}var yt=n(379),Bt=n.n(yt),xt=n(795),Dt=n.n(xt),kt=n(569),Et=n.n(kt),St=n(565),Tt=n.n(St),Mt=n(216),jt=n.n(Mt),Pt=n(589),Ut=n.n(Pt),Wt=n(28),Lt={};Lt.styleTagTransform=Ut(),Lt.setAttributes=Tt(),Lt.insert=Et().bind(null,"head"),Lt.domAPI=Dt(),Lt.insertStyleElement=jt(),Bt()(Wt.Z,Lt),Wt.Z&&Wt.Z.locals&&Wt.Z.locals,new class{constructor(){this.view=new wt}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,