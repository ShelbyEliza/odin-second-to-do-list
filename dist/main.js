(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function r(t,r){e(2,arguments);var a=n(t),i=n(r),o=a.getTime()-i.getTime();return o>0?-1:o<0?1:o}function a(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function i(t){e(1,arguments);var r=n(t),a=r.getUTCDay(),i=(a<1?7:0)+a-1;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function o(t){e(1,arguments);var r=n(t),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var s=i(o),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var l=i(d);return r.getTime()>=s.getTime()?a+1:r.getTime()>=l.getTime()?a:a-1}var s={};function d(){return s}function l(t,r){var i,o,s,l,u,c,h,m;e(1,arguments);var g=d(),f=a(null!==(i=null!==(o=null!==(s=null!==(l=null==r?void 0:r.weekStartsOn)&&void 0!==l?l:null==r||null===(u=r.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==s?s:g.weekStartsOn)&&void 0!==o?o:null===(h=g.locale)||void 0===h||null===(m=h.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==i?i:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=n(t),v=p.getUTCDay(),w=(v<f?7:0)+v-f;return p.setUTCDate(p.getUTCDate()-w),p.setUTCHours(0,0,0,0),p}function u(t,r){var i,o,s,u,c,h,m,g;e(1,arguments);var f=n(t),p=f.getUTCFullYear(),v=d(),w=a(null!==(i=null!==(o=null!==(s=null!==(u=null==r?void 0:r.firstWeekContainsDate)&&void 0!==u?u:null==r||null===(c=r.locale)||void 0===c||null===(h=c.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==s?s:v.firstWeekContainsDate)&&void 0!==o?o:null===(m=v.locale)||void 0===m||null===(g=m.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==i?i:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(p+1,0,w),y.setUTCHours(0,0,0,0);var D=l(y,r),b=new Date(0);b.setUTCFullYear(p,0,w),b.setUTCHours(0,0,0,0);var C=l(b,r);return f.getTime()>=D.getTime()?p+1:f.getTime()>=C.getTime()?p:p-1}function c(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const h=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return c("yy"===e?r%100:r,e.length)},m=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):c(n+1,2)},g=function(t,e){return c(t.getUTCDate(),e.length)},f=function(t,e){return c(t.getUTCHours()%12||12,e.length)},p=function(t,e){return c(t.getUTCHours(),e.length)},v=function(t,e){return c(t.getUTCMinutes(),e.length)},w=function(t,e){return c(t.getUTCSeconds(),e.length)},y=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return c(Math.floor(r*Math.pow(10,n-3)),e.length)};var D={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return h(t,e)},Y:function(t,e,n,r){var a=u(t,r),i=a>0?a:1-a;return"YY"===e?c(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):c(i,e.length)},R:function(t,e){return c(o(t),e.length)},u:function(t,e){return c(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return c(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return c(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return m(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return c(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,r,i,o){var s=function(t,r){e(1,arguments);var i=n(t),o=l(i,r).getTime()-function(t,n){var r,i,o,s,c,h,m,g;e(1,arguments);var f=d(),p=a(null!==(r=null!==(i=null!==(o=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(h=c.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(g=m.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==r?r:1),v=u(t,n),w=new Date(0);return w.setUTCFullYear(v,0,p),w.setUTCHours(0,0,0,0),l(w,n)}(i,r).getTime();return Math.round(o/6048e5)+1}(t,o);return"wo"===r?i.ordinalNumber(s,{unit:"week"}):c(s,r.length)},I:function(t,r,a){var s=function(t){e(1,arguments);var r=n(t),a=i(r).getTime()-function(t){e(1,arguments);var n=o(t),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),i(r)}(r).getTime();return Math.round(a/6048e5)+1}(t);return"Io"===r?a.ordinalNumber(s,{unit:"week"}):c(s,r.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):g(t,e)},D:function(t,r,a){var i=function(t){e(1,arguments);var r=n(t),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=a-r.getTime();return Math.floor(i/864e5)+1}(t);return"Do"===r?a.ordinalNumber(i,{unit:"dayOfYear"}):c(i,r.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return c(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return c(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return c(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return f(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):p(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):c(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):c(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):v(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):w(t,e)},S:function(t,e){return y(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return C(a);case"XXXX":case"XX":return T(a);default:return T(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return C(a);case"xxxx":case"xx":return T(a);default:return T(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+b(a,":");default:return"GMT"+T(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+b(a,":");default:return"GMT"+T(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return c(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return c((r._originalDate||t).getTime(),e.length)}};function b(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+c(i,2)}function C(t,e){return t%60==0?(t>0?"-":"+")+c(Math.abs(t)/60,2):T(t,e)}function T(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+c(Math.floor(a/60),2)+n+c(a%60,2)}const S=D;var M=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},E=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},x={p:E,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return M(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",M(a,e)).replace("{{time}}",E(i,e))}};const k=x;var P=["D","DD"],j=["YY","YYYY"];function L(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var U={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function W(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var B,I={date:W({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:W({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:W({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},O={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):a;r=t.formattingValues[i]||t.formattingValues[a]}else{var o=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[o]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function N(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,s=i[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(d);return o=t.valueCallback?t.valueCallback(l):l,{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(s.length)}}}const q={code:"en-US",formatDistance:function(t,e,n){var r,a=U[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:I,formatRelative:function(t,e,n,r){return O[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(B.matchPattern);if(!n)return null;var r=n[0],a=t.match(B.parsePattern);if(!a)return null;var i=B.valueCallback?B.valueCallback(a[0]):a[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(r.length)}}),era:N({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:N({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:N({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:N({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:N({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var F=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,A=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,H=/^'([^]*?)'?$/,z=/''/g,Q=/[a-zA-Z]/;function R(r,i,o){var s,l,u,c,h,m,g,f,p,v,w,y,D,b,C,T,M,E;e(2,arguments);var x=String(i),U=d(),W=null!==(s=null!==(l=null==o?void 0:o.locale)&&void 0!==l?l:U.locale)&&void 0!==s?s:q,B=a(null!==(u=null!==(c=null!==(h=null!==(m=null==o?void 0:o.firstWeekContainsDate)&&void 0!==m?m:null==o||null===(g=o.locale)||void 0===g||null===(f=g.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==h?h:U.firstWeekContainsDate)&&void 0!==c?c:null===(p=U.locale)||void 0===p||null===(v=p.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==u?u:1);if(!(B>=1&&B<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var I=a(null!==(w=null!==(y=null!==(D=null!==(b=null==o?void 0:o.weekStartsOn)&&void 0!==b?b:null==o||null===(C=o.locale)||void 0===C||null===(T=C.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==D?D:U.weekStartsOn)&&void 0!==y?y:null===(M=U.locale)||void 0===M||null===(E=M.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==w?w:0);if(!(I>=0&&I<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!W.localize)throw new RangeError("locale must contain localize property");if(!W.formatLong)throw new RangeError("locale must contain formatLong property");var O=n(r);if(!function(r){if(e(1,arguments),!function(n){return e(1,arguments),n instanceof Date||"object"===t(n)&&"[object Date]"===Object.prototype.toString.call(n)}(r)&&"number"!=typeof r)return!1;var a=n(r);return!isNaN(Number(a))}(O))throw new RangeError("Invalid time value");var Y=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(O),N=function(t,r){return e(2,arguments),function(t,r){e(2,arguments);var i=n(t).getTime(),o=a(r);return new Date(i+o)}(t,-a(r))}(O,Y),R={firstWeekContainsDate:B,weekStartsOn:I,locale:W,_originalDate:O};return x.match(A).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,k[e])(t,W.formatLong):t})).join("").match(F).map((function(t){if("''"===t)return"'";var e,n,a=t[0];if("'"===a)return(n=(e=t).match(H))?n[1].replace(z,"'"):e;var s,d=S[a];if(d)return null!=o&&o.useAdditionalWeekYearTokens||(s=t,-1===j.indexOf(s))||L(t,i,String(r)),null!=o&&o.useAdditionalDayOfYearTokens||!function(t){return-1!==P.indexOf(t)}(t)||L(t,i,String(r)),d(N,t,W.localize,R);if(a.match(Q))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return t})).join("")}function G(t){let e=t.split("-");return new Date(e[1]+"/"+e[2]+"/"+e[0])}let X=new class{constructor(){this.view="alpha",this.showCompleted=!1,!0===function(){let t;try{t=window.localStorage;const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}()?(this.getStoredData("projects")||(console.log("User has no previous projects data."),localStorage.setItem("projects",{active:[],archived:[]})),this.getStoredData("view")?this.view=this.getStoredData("view"):this.setStoredSettings("view"),this.getStoredData("showCompleted")?this.showCompleted=this.getStoredData("showCompleted"):this.setStoredSettings("showCompleted")):console.log("Storage is not available.")}getStoredData(t){return localStorage.getItem(t)}getParsedStoredData(t){return JSON.parse(localStorage.getItem(t))}setStoredData(t){localStorage.setItem("projects",JSON.stringify(t))}setStoredSettings(t){localStorage.setItem(t,this[t])}deleteProject(t,e){let n=this.getParsedStoredData("projects"),r=n[e].filter((e=>e.id!==t));n[e]=r,this.setStoredData(n)}addProjectData(t,e){let n=this.getParsedStoredData("projects");return n[e].push(t),this.setStoredData(n),n.active[n[e].length-1]}editProjectData(t,e,n){let r=this.getParsedStoredData("projects"),a=r[e].filter((e=>e.id!==t.id));return n?(r[e]=a,r[n].push(t),this.setStoredData(r),r[n][r[n].length-1]):(a.push(t),r[e]=a,this.setStoredData(r),r[e][r[e].length-1])}sortByAlpha(){let t=this.getParsedStoredData("projects");t.active.sort((function(t,e){return t.title<e.title?-1:t.title>e.title?1:0})),t.archived.sort((function(t,e){return t.title<e.title?-1:t.title>e.title?1:0})),this.setStoredData(t)}sortByDue(t){let a=this.getParsedStoredData("projects");"ascending"===t?a.active.sort(((t,r)=>function(t,r){e(2,arguments);var a=n(t),i=n(r),o=a.getTime()-i.getTime();return o<0?-1:o>0?1:o}(new Date(G(t.dueDate)),new Date(G(r.dueDate))))):(a.active.sort(((t,e)=>r(new Date(G(t.dueDate)),new Date(G(e.dueDate))))),a.archived.sort(((t,e)=>r(new Date(G(t.dueDate)),new Date(G(e.dueDate)))))),this.setStoredData(a)}};class _{constructor(t,e,n,r){this.dom=document.createElement(t),e.length>=0&&this.dom.classList.add(e),n&&(this.dom.textContent=n,"button"===t&&(this.dom.value=n)),r&&this.appendToParent(r)}addToClassList(t){this.dom.classList.add(t)}removeFromClassList(t){this.dom.classList.remove(t)}appendToParent(t){t.appendChild(this.dom)}}class J{constructor(t,e,n,r){this.id=t.id,this.wrapper=new _("div","card-wrapper"),this.wrapper.dom.id=t.id,this.title=new _("h3","title",t.title,this.wrapper.dom);let a=(i=t.dueDate,R(new Date(G(i)),"MMMM dd, yyyy"));var i;this.dueDate=new _("p","due-date",a,this.wrapper.dom),this.description=new _("p","description",t.description,this.wrapper.dom),this.priority=t.priority,!0===this.priority&&this.wrapper.addToClassList("priority"),this.completed=t.completed,!0===this.completed&&this.wrapper.addToClassList("completed"),this.toDoList=new _("ul","to-do-list","",this.wrapper.dom),t.toDos&&t.toDos.forEach((t=>{new _("li","to-do-item",t,this.toDoList.dom)})),this.toDoList.dom.hidden=!0,this.btnWrapper=new _("div","card-btn-wrapper","",this.wrapper.dom),this.deleteBtn=new _("button","delete-btn","Delete",this.btnWrapper.dom),this.editBtn=new _("button","edit-btn","Edit",this.btnWrapper.dom),this.expandBtn=new _("button","expand-btn","Expand",this.btnWrapper.dom),this.parentDom=e,this.parentDom.appendChild(this.wrapper.dom),this.expandBtn.dom.addEventListener("click",(t=>{t.preventDefault(),document.getElementById("dialog-expanded").showModal(),r.expandProject(this.id,this)})),this.deleteBtn.dom.addEventListener("click",(t=>{t.preventDefault(),X.deleteProject(this.id,"active"),this.wrapper.dom.remove()})),this.editBtn.dom.addEventListener("click",(e=>{e.preventDefault(),n.openModal(t,this),n.turnOnEditMode(t)}))}replaceToDos(t){for(;this.toDoList.dom.firstChild;)this.toDoList.dom.removeChild(this.toDoList.dom.lastChild);t.forEach((t=>{new _("li","to-to-item",t,this.toDoList.dom)}))}toggleProperty(t,e){this[e]!==t&&(this[e]=t,!0===this[e]?this.wrapper.addToClassList(e):this.wrapper.removeFromClassList(e))}editCard(t){this.title.dom.textContent=t.title,this.dueDate.dom.textContent=t.dueDate,this.description.dom.textContent=t.description,this.toggleProperty(t.priority,"priority"),this.toggleProperty(t.completed,"completed"),this.replaceToDos(t.toDos),document.location.reload()}}const V=document.getElementById("modal-form"),K=document.getElementById("add-project-wrapper"),$=document.getElementById("add-to-do-btn"),Z=document.getElementById("add-project-btn"),tt=document.getElementById("cancel-project-btn"),et=document.getElementById("submit-project-btn"),nt=document.getElementById("title-input"),rt=document.getElementById("dueDate-input"),at=document.getElementById("description-input"),it=document.getElementById("priority-input"),ot=document.getElementById("completed-input"),st=document.getElementById("to-do-input"),dt=document.getElementById("to-do-list-div");class lt{constructor(){this.editMode=!1,this.editData="",this.editComplete="",this.toDoData=[],this.sort="alpha",Z.addEventListener("click",(()=>{K.showModal()})),$.addEventListener("click",(t=>{if(t.preventDefault(),this.toDoData||(this.toDoData=[]),""!==st.value)if(this.toDoData.includes(st.value))console.log("To do already exists.");else{let t=st.value;this.toDoData.push(t),this.createToDoDom(t)}st.value="",st.focus()})),tt.addEventListener("click",(t=>{t.preventDefault(),this.turnOffEditMode(),this.clearForm()})),et.addEventListener("click",(t=>{t.preventDefault();let e={title:nt.value,dueDate:rt.value,description:at.value,priority:it.checked,completed:ot.checked,toDos:this.toDoData};if(!0!==this.editMode){e.id=this.createId(e.title);let t=X.addProjectData(e,"active"),n=this.setParentDom(t.completed,t.priority);console.log(n),new J(t,n,this)}else{e.id=this.editData.id;let t=X.editProjectData(e,"active");this.card.editCard(t),this.turnOffEditMode()}this.clearForm()}))}setParentDom(t,e){return!0===t?document.getElementById("completed-list-wrapper"):!0===e?document.getElementById("priority-list-wrapper"):document.getElementById("project-list-wrapper")}createId(t){let e=Math.floor(500*Math.random())+1;return t[0]+t[2]+t[3]+"-"+e}clearForm(){for(;dt.firstChild;)dt.removeChild(dt.lastChild);this.toDoData=[],V.reset(),K.close()}turnOnEditMode(t){console.log(t),this.editMode=!0,this.editComplete=t.completed,this.editData=t}turnOffEditMode(){this.editMode=!1,this.editData="",this.editComplete=""}openModal(t,e){K.showModal(),nt.value=t.title,rt.value=t.dueDate,at.value=t.description,it.checked=t.priority,t.completed?ot.checked=t.completed:ot.checked=!1,this.toDoData=t.toDos,this.toDoData&&this.toDoData.length>0&&this.toDoData.forEach((t=>{this.createToDoDom(t)})),this.card=e}createToDoDom(t){let e=new _("div","temp-to-do-div","",dt);new _("p","temp-to-to-item",t,e.dom),new _("button","delete-to-do-btn","X",e.dom).dom.addEventListener("click",(n=>{n.preventDefault(),console.log("I am deleting a to do");let r=this.toDoData.findIndex((e=>e===t));this.toDoData.splice(r,1),e.dom.remove()}))}}class ut{constructor(t){this.projectDialog=document.getElementById("dialog-expanded"),this.editDialog=document.getElementById("add-project-wrapper"),this.editModal=t;const e=document.getElementById("close-proj-btn"),n=document.getElementById("edit-proj-btn"),r=document.getElementById("delete-proj-btn");this.title=document.querySelector(".title-ex"),this.dueDate=document.querySelector(".due-date-ex"),this.description=document.querySelector(".description-ex"),this.toDoWrapper=document.querySelector(".to-do-list-ex"),e.addEventListener("click",(t=>{t.preventDefault(),this.clearDom(),this.projectDialog.close()})),r.addEventListener("click",(t=>{t.preventDefault(),X.deleteProject(this.id,"active"),this.clearDom(),this.projectDialog.close(),document.location.reload()})),n.addEventListener("click",(t=>{t.preventDefault(),this.projectDialog.close();let e=this.getProject(this.id);this.editModal.openModal(e,this.card),this.editModal.turnOnEditMode(e),this.clearDom()})),this.projectDialog.close()}clearDom(){for(this.title.textContent="",this.dueDate.textContent="",this.description.textContent="",this.projectDialog.dataset.projectId="",this.id="",this.card="";this.toDoWrapper.firstChild;)this.toDoWrapper.removeChild(this.toDoWrapper.lastChild)}getProject(t){return JSON.parse(localStorage.getItem("projects")).active.find((e=>e.id===t))}expandProject(t,e){let n=this.getProject(t);this.title.textContent=n.title,this.dueDate.textContent=n.dueDate,this.description.textContent=n.description,this.id=n.id,this.card=e;let r=Array.from(this.projectDialog.classList);!0===n.priority?r.includes("priority")||this.projectDialog.classList.add("priority"):r.includes("priority")&&this.projectDialog.classList.remove("priority"),n.toDos.length>0&&this.createToDoDom(n.toDos)}createToDoDom(t){t.forEach((t=>{new _("li","to-do-item",t,this.toDoWrapper)}))}}const ct=document.getElementById("ascending-btn"),ht=document.getElementById("descending-btn"),mt=document.getElementById("alphabetical-btn"),gt=document.getElementById("completed-btn"),ft=document.getElementById("project-list-wrapper"),pt=document.getElementById("priority-list-wrapper"),vt=document.getElementById("completed-list-wrapper"),wt=document.getElementById("completed-wrapper-full");class yt{constructor(){this.currentSort="alpha",this.modal=new lt,this.expanded=new ut(this.modal),ct.addEventListener("click",(t=>{t.preventDefault(),"ascending"!==this.currentSort&&(this.switchActiveBtn(),X.sortByDue("ascending"),ct.classList.add("active-btn"),this.setCurrentSort("ascending"),this.switchView())})),ht.addEventListener("click",(t=>{t.preventDefault(),"descending"!==this.currentSort&&(this.switchActiveBtn(),X.sortByDue("descending"),ht.classList.add("active-btn"),this.setCurrentSort("descending"),this.switchView())})),mt.addEventListener("click",(t=>{t.preventDefault(),"alpha"!==this.currentSort&&(this.switchActiveBtn(),X.sortByAlpha(),mt.classList.add("active-btn"),this.setCurrentSort("alpha"),this.switchView())})),gt.addEventListener("click",(t=>{!0===wt.hidden?(wt.hidden=!1,gt.classList.add("active-btn")):(wt.hidden=!0,gt.classList.remove("active-btn"))})),this.setAllView()}switchActiveBtn(){switch(this.currentSort){case"alpha":mt.classList.remove("active-btn");break;case"ascending":ct.classList.remove("active-btn");break;case"descending":ht.classList.remove("active-btn");break;default:console.log("No switch.")}}setCurrentSort(t){this.currentSort=t}switchView(){let t=JSON.parse(localStorage.getItem("projects")).active;if(t.length>0){for(;pt.firstChild;)pt.removeChild(pt.lastChild);for(;ft.firstChild;)ft.removeChild(ft.lastChild);for(;vt.firstChild;)vt.removeChild(vt.lastChild);t.forEach((t=>{!1!==t.completed&&t.completed?new J(t,vt,this.modal,this.expanded).wrapper.addToClassList("completed"):(console.log(t),!1===t.priority?new J(t,ft,this.modal,this.expanded):!0===t.priority&&new J(t,pt,this.modal,this.expanded))}))}}setAllView(){let t=JSON.parse(localStorage.getItem("projects")).active;t.length>0&&t.forEach((t=>{t.completed&&!0===t.completed?new J(t,vt,this.modal,this.expanded):!1===t.priority?new J(t,ft,this.modal,this.expanded):!0===t.priority&&new J(t,pt,this.modal,this.expanded)}))}}new class{constructor(){this.view=new yt}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,